---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

const int MAX_NODES = 1000;

bool dfs(int graph[][MAX_NODES], bool visited[], bool recursionStack[], int numNodes, int node) {
    visited[node] = true;
    recursionStack[node] = true;
    for (int neighbor = 0; neighbor < numNodes; ++neighbor) {
        if (graph[node][neighbor] == 1) {
            if (!visited[neighbor]) {
                if (dfs(graph, visited, recursionStack, numNodes, neighbor)) {
                    return true;
                }
            } else if (recursionStack[neighbor]) {
                return true;
            }
        }
    }
    recursionStack[node] = false;
    return false;
}

bool hasCycle(int graph[][MAX_NODES], int numNodes) {
    bool visited[MAX_NODES] = {false};
    bool recursionStack[MAX_NODES] = {false};
    for (int i = 0; i < numNodes; ++i) {
        if (!visited[i]) {
            if (dfs(graph, visited, recursionStack, numNodes, i)) {
                return true;
            }
        }
    }
    return false;
}

int main() {
    int numNodes = 4;
    int graph[MAX_NODES][MAX_NODES] = {0};

    // Example graph
    graph[0][1] = graph[0][2] = graph[1][2] = graph[2][0] = graph[2][3] = graph[3][3] = 1;
    if (hasCycle(graph, numNodes)) {
        cout << "Graph contains a cycle." << endl;
    }
    else {
        cout << "Graph does not contain a cycle." << endl;
    }
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <queue>

using namespace std;

const int MAX_CELLS = 100;

struct Cell {
    int position;
    int moves;
};

int minDiceThrows(int board[], int N) {
    bool visited[MAX_CELLS] = {false};
    queue<Cell> q;
    q.push({1, 0});
    visited[1] = true;
    while (!q.empty()) {
        Cell current = q.front();
        q.pop();
        if (current.position == N - 1) {
            return current.moves;
        }
        for (int i = current.position + 1; i <= current.position + 6 && i < N; ++i) {
            if (!visited[i]) {
                Cell next;
                next.moves = current.moves + 1;
                visited[i] = true;
                if (board[i] != -1) {
                    next.position = board[i];
                }
                else {
                    next.position = i;
                }
                q.push(next);
            }
        }
    }
    return -1;
}

int main() {
    // Example board
    int board[MAX_CELLS] = {-1, -1, 3, 4, -1, 6, -1, -1, -1, -1, -1, -1, -1};
    int N = 13;
    int minThrows = minDiceThrows(board, N);
    if (minThrows != -1) {
        cout << "Minimum number of dice throws required: " << minThrows << endl;
    }
    else {
        cout << "The last cell is not reachable." << endl;
    }
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <climits>

using namespace std;

const int MAX_ROWS = 100;
const int MAX_COLS = 100;

int minCostPath(int grid[MAX_ROWS][MAX_COLS], int rows, int cols) {
    int dp[MAX_ROWS][MAX_COLS];
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            dp[i][j] = INT_MAX;
        }
    }
    dp[0][0] = grid[0][0];
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (i != 0 || j != 0) {
                dp[i][j] = grid[i][j] + min((i > 0 ? dp[i - 1][j] : INT_MAX), (j > 0 ? dp[i][j - 1] : INT_MAX));
            }
        }
    }
    return dp[rows - 1][cols - 1];
}

int main() {
    // Example grid
    int grid[MAX_ROWS][MAX_COLS] = {
        {1, 3, 1},
        {1, 5, 1},
        {4, 2, 1}
    };
    int rows = 3;
    int cols = 3;
    int minCost = minCostPath(grid, rows, cols);
    cout << "Minimum cost to reach the bottom right cell: " << minCost << endl;
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

const int MAX_ROWS = 100;
const int MAX_COLS = 100;

void dfs(int grid[MAX_ROWS][MAX_COLS], int rows, int cols, int row, int col) {
    grid[row][col] = 0;
    int dx[] = {-1, 1, 0, 0, -1, -1, 1, 1};
    int dy[] = {0, 0, -1, 1, -1, 1, -1, 1};
    for (int i = 0; i < 8; ++i) {
        int newRow = row + dx[i];
        int newCol = col + dy[i];
        if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
            dfs(grid, rows, cols, newRow, newCol);
        }
    }
}

int countIslands(int grid[MAX_ROWS][MAX_COLS], int rows, int cols) {
    int islands = 0;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (grid[i][j] == 1) {
                dfs(grid, rows, cols, i, j);
                islands++;
            }
        }
    }
    return islands;
}

int main() {
    // Example grid
    int grid[MAX_ROWS][MAX_COLS] = {
        {1, 1, 0, 0, 0},
        {0, 1, 0, 0, 1},
        {1, 0, 0, 1, 1},
        {0, 0, 0, 0, 0},
        {1, 0, 1, 0, 1}
    };
    int rows = 5;
    int cols = 5;
    int islands = countIslands(grid, rows, cols);
    cout << "Number of islands: " << islands << endl;
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <queue>
#include <unordered_set>

using namespace std;

const int MAX_NODES = 1000;

int* find_fof_bfs(int graph[][MAX_NODES], int numNodes, int person) {
    bool visited[MAX_NODES] = {false};
    int* fof = new int[MAX_NODES];
    int fofCount = 0;
    queue<int> q;
    visited[person] = true;
    q.push(person);
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        for (int i = 0; i < numNodes; ++i) {
            if (graph[current][i] && !visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
    for (int i = 0; i < numNodes; ++i) {
        if (!visited[i] && i != person) {
            for (int j = 0; j < numNodes; ++j) {
                if (visited[j] && graph[i][j]) {
                    fof[fofCount++] = i;
                    break;
                }
            }
        }
    }
    fof[fofCount] = -1;
    return fof;
}

void dfs(int graph[][MAX_NODES], bool visited[], int person, unordered_set<int>& fof, int numNodes) {
    visited[person] = true;
    for (int i = 0; i < numNodes; ++i) {
        if (graph[person][i] && !visited[i]) {
            visited[i] = true;
            for (int j = 0; j < numNodes; ++j) {
                if (j != person && graph[i][j]) {
                    fof.insert(j);
                }
            }
            dfs(graph, visited, i, fof, numNodes);
        }
    }
}

int* find_fof_dfs(int graph[][MAX_NODES], int numNodes, int person) {
    bool visited[MAX_NODES] = {false};
    unordered_set<int> fofSet;
    dfs(graph, visited, person, fofSet, numNodes);
    int* fof = new int[fofSet.size() + 1];
    int index = 0;
    for (int f : fofSet) {
        fof[index++] = f;
    }
    fof[index] = -1;
    return fof;
}

int main() {
    // Example social network graph (adjacency matrix representation)
    int graph[MAX_NODES][MAX_NODES] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 0, 0},
        {0, 1, 0, 0, 0},
        {0, 1, 0, 0, 0}
    };
    int numNodes = 5;
    int person = 0;
    cout << "Using BFS:" << endl;
    int* bfs_fof = find_fof_bfs(graph, numNodes, person);
    cout << "Friends-of-friends of person " << person << ": ";
    for (int i = 0; bfs_fof[i] != -1; ++i) {
        cout << bfs_fof[i] << " ";
    }
    cout << endl;
    delete[] bfs_fof;
    cout << "Using DFS:" << endl;
    int* dfs_fof = find_fof_dfs(graph, numNodes, person);
    cout << "Friends-of-friends of person " << person << ": ";
    for (int i = 0; dfs_fof[i] != -1; ++i) {
        cout << dfs_fof[i] << " ";
    }
    cout << endl;
    delete[] dfs_fof;
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------