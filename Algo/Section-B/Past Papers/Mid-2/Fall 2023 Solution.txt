int Function(char* X, char* Y, int m, int n) {
    int dp[m + 1][n + 1];
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                dp[i][j] = 1 + dp[i - 1][j - 1];
            else
                dp[i][j] = max(dp[i][j - 1] + 1, dp[i - 1][j] + 1);
        }
    }
    return dp[m][n];
}

int Function( char *X, char *Y, int m, int n ) {
    if (m == 0 || n == 0)
        return 0;
    if (X[m-1] == Y[n-1])
        return 1 + Function (X, Y, m-1, n-1);
    else
        return max (Function (X, Y, m, n-1) +1, Function (X, Y, m-1, n) +1);
}
